import { google } from 'googleapis';
import { NextResponse } from 'next/server';

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
const SHEET_ID = process.env.SHEET_ID || '';

export const runtime = "nodejs"; // ‚úÖ API„É´„Éº„Éà„ÅÆ„É©„É≥„Çø„Ç§„É†„ÇíNode.js„Å´Ë®≠ÂÆö

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const userId = searchParams.get("userId");

    if (!userId) {
      console.error("‚ùå userId „Åå„É™„ÇØ„Ç®„Çπ„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
      return NextResponse.json({ error: "userId „ÅåÂøÖË¶Å„Åß„Åô" }, { status: 400 });
    }

    if (!SHEET_ID || !process.env.GOOGLE_PROJECT_ID || !process.env.GOOGLE_PRIVATE_KEY || !process.env.GOOGLE_CLIENT_EMAIL) {
      console.error("‚ùå Áí∞Â¢ÉÂ§âÊï∞„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô");
      return NextResponse.json({ error: "Áí∞Â¢ÉÂ§âÊï∞„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô" }, { status: 500 });
    }

    const auth = new google.auth.GoogleAuth({
      credentials: {
        type: 'service_account',
        project_id: process.env.GOOGLE_PROJECT_ID,
        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
        client_email: process.env.GOOGLE_CLIENT_EMAIL,
      },
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });

    const sheets = google.sheets({ version: 'v4', auth });

    // ‚úÖ Users „Ç∑„Éº„Éà„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
    const headersResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: "Users!A1:Z1", // üîπ „Éò„ÉÉ„ÉÄ„Éº„ÅÆ„ÅøÂèñÂæó
    });

    const headers = headersResponse.data.values?.[0] || [];
    const engagementsColumnIndex = headers.indexOf("Engagements"); // üîπ "Engagements" „ÅÆÂàó„ÇíÂãïÁöÑ„Å´ÂèñÂæó

    if (engagementsColumnIndex === -1) {
      console.error("‚ùå Users„Ç∑„Éº„Éà„Å´ 'Engagements' Âàó„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì");
      return NextResponse.json({ error: "'Engagements' Âàó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì" }, { status: 500 });
    }

    // ‚úÖ Users „Ç∑„Éº„Éà„ÅÆÂÖ®„Éá„Éº„Çø„ÇíÂèñÂæó
    const usersResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: "Users!A:Z",
    });

    const usersData = usersResponse.data.values || [];
    
    // üîπ userId „Å´Ë©≤ÂΩì„Åô„ÇãË°å„ÇíÊ§úÁ¥¢
    const userRow = usersData.find(row => row[0] === userId);
    const userEngagements = userRow ? userRow[engagementsColumnIndex]?.split(",") || [] : [];

    console.log(`‚úÖ „É¶„Éº„Ç∂„Éº ${userId} „ÅÆ„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà:`, userEngagements);

    // ‚úÖ Engagements „Ç∑„Éº„Éà„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
    const engagementsResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: 'Engagements!A2:B', // AÂàó: EngagementÂêç, BÂàó: Ëâ≤
    });

    const allEngagements = (engagementsResponse.data.values || []).map(row => ({
      name: row[0],
      color: row[1] || "#3788d8",
    }));

    // ‚úÖ `Users` „Ç∑„Éº„Éà„ÅÆÊÉÖÂ†±„Å® `Engagements` „ÅÆ„É™„Çπ„Éà„ÇíÁÖßÂêà
    const filteredEngagements = allEngagements.filter(eng => userEngagements.includes(eng.name));

    return NextResponse.json(filteredEngagements, { status: 200 });

  } catch (error) {
    console.error("‚ùå fetchEngagements API „Ç®„É©„Éº:", error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

