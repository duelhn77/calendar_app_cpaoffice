{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app_cpaoffice/calendar_app_cpaoffice/src/app/api/fetchBudgetAndActuals/route.ts"],"sourcesContent":["// src/pages/api/fetchBudgetAndActuals.ts\r\nimport { google } from \"googleapis\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst SHEET_ID = process.env.SHEET_ID || \"\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const auth = new google.auth.GoogleAuth({\r\n      credentials: {\r\n        type: \"service_account\",\r\n        project_id: process.env.GOOGLE_PROJECT_ID,\r\n        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n        client_email: process.env.GOOGLE_CLIENT_EMAIL,\r\n      },\r\n      scopes: [\"https://www.googleapis.com/auth/spreadsheets.readonly\"],\r\n    });\r\n\r\n    const sheets = google.sheets({ version: \"v4\", auth });\r\n\r\n    // TimeSheetデータの取得\r\n    const response = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: SHEET_ID,\r\n      range: \"TimeSheet!A:Z\",\r\n    });\r\n    const rows = response.data.values || [];\r\n    if (rows.length < 2) throw new Error(\"データが見つかりません\");\r\n\r\n    const headers = rows[0];\r\n    const dataRows = rows.slice(1);\r\n\r\n    const idx = (name: string) => headers.indexOf(name);\r\n\r\n    const userIdIdx = idx(\"UserID\");\r\n    const userNameIdx = idx(\"User_Name\");\r\n    const engagementIdx = idx(\"Engagement\");\r\n    const activityIdx = idx(\"Activity\");\r\n    const startIdx = idx(\"Start\");\r\n    const endIdx = idx(\"End\");\r\n\r\n    if ([userIdIdx, userNameIdx, engagementIdx, activityIdx, startIdx, endIdx].includes(-1)) {\r\n      throw new Error(\"必要なカラムが不足しています\");\r\n    }\r\n\r\n    // ActivitiesシートからActivity IDと予定時間を取得\r\n    const actRes = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: SHEET_ID,\r\n      range: \"Activities!A:D\", // A:Engagement, B:Activity_id, C:Activity, D:予定時間\r\n    });\r\n    const activityRows = actRes.data.values || [];\r\n\r\n    const getActivityMeta = (eng: string, act: string) => {\r\n      const match = activityRows.find(r => r[0] === eng && r[2] === act);\r\n      return {\r\n        id: match?.[1] || \"\",\r\n        budget: parseFloat(match?.[3] || \"0\") || 0,\r\n      };\r\n    };\r\n\r\n    const result = dataRows.map((row) => {\r\n      const startRaw = row[startIdx];\r\n      const endRaw = row[endIdx];\r\n      const startDate = new Date(startRaw);\r\n      const endDate = new Date(endRaw);\r\n\r\n      const diffInMinutes = (endDate.getTime() - startDate.getTime()) / (1000 * 60);\r\n      const actual = Math.round((diffInMinutes / 60) * 10) / 10;\r\n      const month = !isNaN(startDate.getTime()) ? startDate.toISOString().slice(0, 7) : \"\";\r\n\r\n      const engagement = row[engagementIdx];\r\n      const activity = row[activityIdx];\r\n      const meta = getActivityMeta(engagement, activity);\r\n\r\n      return {\r\n        userId: row[userIdIdx],\r\n        userName: row[userNameIdx],\r\n        engagement,\r\n        activity,\r\n        budget: meta.budget,\r\n        actual,\r\n        month,\r\n        activityId: meta.id,\r\n      };\r\n    });\r\n\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    console.error(\"❌ fetchBudgetAndActuals エラー:\", error);\r\n    return NextResponse.json(\r\n      { error: (error as Error).message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;AACzC;AACA;;;AAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,QAAQ,IAAI;AAElC,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,aAAa;gBACX,MAAM;gBACN,YAAY,QAAQ,GAAG,CAAC,iBAAiB;gBACzC,aAAa,QAAQ,GAAG,CAAC,kBAAkB,EAAE,QAAQ,QAAQ;gBAC7D,cAAc,QAAQ,GAAG,CAAC,mBAAmB;YAC/C;YACA,QAAQ;gBAAC;aAAwD;QACnE;QAEA,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QAEnD,kBAAkB;QAClB,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QACA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QACvC,IAAI,KAAK,MAAM,GAAG,GAAG,MAAM,IAAI,MAAM;QAErC,MAAM,UAAU,IAAI,CAAC,EAAE;QACvB,MAAM,WAAW,KAAK,KAAK,CAAC;QAE5B,MAAM,MAAM,CAAC,OAAiB,QAAQ,OAAO,CAAC;QAE9C,MAAM,YAAY,IAAI;QACtB,MAAM,cAAc,IAAI;QACxB,MAAM,gBAAgB,IAAI;QAC1B,MAAM,cAAc,IAAI;QACxB,MAAM,WAAW,IAAI;QACrB,MAAM,SAAS,IAAI;QAEnB,IAAI;YAAC;YAAW;YAAa;YAAe;YAAa;YAAU;SAAO,CAAC,QAAQ,CAAC,CAAC,IAAI;YACvF,MAAM,IAAI,MAAM;QAClB;QAEA,qCAAqC;QACrC,MAAM,SAAS,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAClD,eAAe;YACf,OAAO;QACT;QACA,MAAM,eAAe,OAAO,IAAI,CAAC,MAAM,IAAI,EAAE;QAE7C,MAAM,kBAAkB,CAAC,KAAa;YACpC,MAAM,QAAQ,aAAa,IAAI,CAAC,CAAA,IAAK,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,EAAE,KAAK;YAC9D,OAAO;gBACL,IAAI,OAAO,CAAC,EAAE,IAAI;gBAClB,QAAQ,WAAW,OAAO,CAAC,EAAE,IAAI,QAAQ;YAC3C;QACF;QAEA,MAAM,SAAS,SAAS,GAAG,CAAC,CAAC;YAC3B,MAAM,WAAW,GAAG,CAAC,SAAS;YAC9B,MAAM,SAAS,GAAG,CAAC,OAAO;YAC1B,MAAM,YAAY,IAAI,KAAK;YAC3B,MAAM,UAAU,IAAI,KAAK;YAEzB,MAAM,gBAAgB,CAAC,QAAQ,OAAO,KAAK,UAAU,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;YAC5E,MAAM,SAAS,KAAK,KAAK,CAAC,AAAC,gBAAgB,KAAM,MAAM;YACvD,MAAM,QAAQ,CAAC,MAAM,UAAU,OAAO,MAAM,UAAU,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK;YAElF,MAAM,aAAa,GAAG,CAAC,cAAc;YACrC,MAAM,WAAW,GAAG,CAAC,YAAY;YACjC,MAAM,OAAO,gBAAgB,YAAY;YAEzC,OAAO;gBACL,QAAQ,GAAG,CAAC,UAAU;gBACtB,UAAU,GAAG,CAAC,YAAY;gBAC1B;gBACA;gBACA,QAAQ,KAAK,MAAM;gBACnB;gBACA;gBACA,YAAY,KAAK,EAAE;YACrB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,AAAC,MAAgB,OAAO;QAAC,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}